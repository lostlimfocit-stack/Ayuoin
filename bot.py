# ayuoin_bot.py
import asyncio
import os
import logging
import sqlite3
from aiohttp import web
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# ---------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ----------
API_TOKEN = os.getenv("API_TOKEN", "8458016571:AAFQpM-UjHR2nneYhwgDHECQILulwGTtapQ")
ADMIN_ID = int(os.getenv("ADMIN_ID", "6218936231"))
DB_PATH = os.getenv("DB_PATH", "ayuoin.db")
PORT = int(os.getenv("PORT", 8080))

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ---------- Aiogram init ----------
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# ---------- FSM ----------
class Transfer(StatesGroup):
    waiting_for_user = State()
    waiting_for_amount = State()

# ---------- Inline keyboard ----------
main_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ë–∞–ª–∞–Ω—Å ¬∞.‚Ä¢üéÄ", callback_data="balance")],
    [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å ¬∞.‚Ä¢üéÄ", callback_data="send")]
])

# ---------- SQLite helper ----------
_conn = None

def init_db():
    global _conn
    _conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    _conn.row_factory = sqlite3.Row
    cur = _conn.cursor()
    # users: user_id text PK, username text, balance int
    cur.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id TEXT PRIMARY KEY,
            username TEXT,
            balance INTEGER NOT NULL
        )
    """)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS promocodes (
            code TEXT PRIMARY KEY,
            reward INTEGER NOT NULL
        )
    """)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS used_promos (
            code TEXT,
            user_id TEXT,
            PRIMARY KEY(code, user_id)
        )
    """)
    _conn.commit()

def get_user_row(user_id):
    cur = _conn.execute("SELECT * FROM users WHERE user_id = ?", (str(user_id),))
    return cur.fetchone()

def ensure_user(user_id, username=None):
    """–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å –±–∞–ª–∞–Ω—Å–æ–º 25. –ï—Å–ª–∏ –µ—Å—Ç—å ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å username –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
       –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å (int)."""
    u = get_user_row(user_id)
    if u is None:
        _conn.execute("INSERT INTO users (user_id, username, balance) VALUES (?, ?, ?)",
                      (str(user_id), username if username else None, 25))
        _conn.commit()
        return 25
    else:
        # –æ–±–Ω–æ–≤–ª—è–µ–º username –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        if username and (u["username"] != username):
            _conn.execute("UPDATE users SET username = ? WHERE user_id = ?", (username, str(user_id)))
            _conn.commit()
        return u["balance"]

def get_balance(user_id):
    row = _conn.execute("SELECT balance FROM users WHERE user_id = ?", (str(user_id),)).fetchone()
    return row["balance"] if row else None

def add_balance(user_id, amount):
    _conn.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, str(user_id)))
    _conn.commit()

def create_promo(code, reward):
    _conn.execute("INSERT OR REPLACE INTO promocodes (code, reward) VALUES (?, ?)", (code, int(reward)))
    _conn.commit()

def promo_activate(user_id, code):
    """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥: –≤–µ—Ä–Ω—É—Ç—å (True, reward) –ø—Ä–∏ —É—Å–ø–µ—Ö–µ; (False, reason) –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ."""
    row = _conn.execute("SELECT reward FROM promocodes WHERE code = ?", (code,)).fetchone()
    if not row:
        return False, "no_such"
    if _conn.execute("SELECT 1 FROM used_promos WHERE code = ? AND user_id = ?", (code, str(user_id))).fetchone():
        return False, "used"
    reward = int(row["reward"])
    try:
        cur = _conn.cursor()
        cur.execute("BEGIN")
        cur.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (reward, str(user_id)))
        cur.execute("INSERT INTO used_promos (code, user_id) VALUES (?, ?)", (code, str(user_id)))
        _conn.commit()
        return True, reward
    except Exception as e:
        _conn.rollback()
        logger.exception("promo activation failed")
        return False, "error"

def find_user_by_username(username):
    """–ò—â–µ—Ç user_id –ø–æ username (–±–µ–∑ @), –Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É."""
    if not username:
        return None
    row = _conn.execute("SELECT user_id FROM users WHERE LOWER(username) = ?", (username.lower(),)).fetchone()
    return row["user_id"] if row else None

def transfer_atomic(sender_id, receiver_username, amount):
    """–ê—Ç–æ–º–∞—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –ø–æ username (–±–µ–∑ @). –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (True, receiver_id) –∏–ª–∏ (False, reason)."""
    if amount <= 0:
        return False, "invalid_amount"
    receiver_row = _conn.execute("SELECT user_id FROM users WHERE LOWER(username) = ?", (receiver_username.lower(),)).fetchone()
    if not receiver_row:
        return False, "no_user"
    receiver_id = receiver_row["user_id"]
    try:
        cur = _conn.cursor()
        cur.execute("BEGIN IMMEDIATE")
        srow = cur.execute("SELECT balance FROM users WHERE user_id = ?", (str(sender_id),)).fetchone()
        if not srow or srow["balance"] < amount:
            _conn.rollback()
            return False, "no_money"
        cur.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (amount, str(sender_id)))
        cur.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, receiver_id))
        _conn.commit()
        return True, receiver_id
    except Exception:
        _conn.rollback()
        logger.exception("transfer failed")
        return False, "error"

# ---------- Handlers ----------
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = str(message.from_user.id)
    username = message.from_user.username  # could be None
    # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ –ë–î –∏ –ø–æ–¥–∞—Ä–æ–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞—Ö–æ–¥–µ
    bal = ensure_user(user_id, username)
    # –ï—Å–ª–∏ –≤ /start –ø–µ—Ä–µ–¥–∞–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç ‚Äî —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–º
    parts = (message.text or "").split()
    if len(parts) > 1:
        code = parts[1].strip()
        ok, info = promo_activate(user_id, code)
        if ok:
            # info ‚Äî reward
            await message.answer("—É—Ä–∞! –ø—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª—Å—è! –ü–æ–∑–¥—Ä–∞–≤–ª—è—éüíù")
        else:
            if info == "used":
                await message.answer("–≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤–∞–º–∏ —Ä–∞–Ω–µ–µ ü•∫")
            elif info == "no_such":
                await message.answer("–¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ü•∫")
            else:
                await message.answer("–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)
    text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
        "–Ø –∞—é–æ–∏–Ω, –≤–∞–ª—é—Ç–∞ tg –∫–∞–Ω–∞–ª–∞: @ayuolmaoo (‚Å†.‚Å†‚ùõ‚Å†·¥ó‚Å†‚ùõ‚Å†.)\n\n"
        "–ë–ª–∞–≥–æ–¥–∞—Ä—è –º–Ω–µ –º–æ–∂–Ω–æ:\n"
        "–û–±–º–µ–Ω–∏–≤–∞—Ç—å, –ø—Ä–æ–¥–∞–≤–∞—Ç—å, –ø–æ–∫—É–ø–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π ;\n\n"
        "üéÄ –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –∞—é–æ–∏–Ω—ã –¥—Ä—É–≥—É!"
    )
    await message.answer(text, reply_markup=main_menu)

@dp.callback_query(F.data == "balance")
async def on_balance_query(callback: types.CallbackQuery):
    # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ ack
    await callback.answer()  # ack callback
    user_id = str(callback.from_user.id)
    bal = get_balance(user_id)
    if bal is None:
        # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞—ë–º –ø–æ–¥–∞—Ä–æ–∫
        bal = ensure_user(user_id, callback.from_user.username)
    # –ü–æ–∫–∞–∂–µ–º –±–∞–ª–∞–Ω—Å –≤ alert (–æ–¥–∏–Ω —Ä–∞–∑, –±–µ–∑ –¥—É–±–ª–µ–π –≤ —á–∞—Ç–µ)
    await callback.answer(f"–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {bal} –∞—é–æ–∏–Ω–æ–≤ üíñ", show_alert=True)

@dp.callback_query(F.data == "send")
async def on_send_query(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()  # ack
    await callback.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–º—É —á–µ–ª–æ–≤–µ–∫—É –∞—é–æ–∏–Ω—ã ^^ ~\n"
        "–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ @—é–∑–µ—Ä–Ω–µ–π–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: @nick) üíï"
    )
    await state.set_state(Transfer.waiting_for_user)

@dp.message(Transfer.waiting_for_user)
async def process_user(message: types.Message, state: FSMContext):
    username = message.text.lstrip("@").strip()
    # –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä —Å —Ç–∞–∫–∏–º username
    target_id = find_user_by_username(username)
    if not target_id:
        await message.answer("–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ... ü•∫ (–ø–æ–ø—Ä–æ—Å–∏ –µ–≥–æ –Ω–∞–∂–∞—Ç—å /start —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è)")
        return
    await state.update_data(receiver=username)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∞—é–æ–∏–Ω–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ ‚ú®")
    await state.set_state(Transfer.waiting_for_amount)

@dp.message(Transfer.waiting_for_amount)
async def process_amount(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text.strip())
    except:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
        return
    sender_id = str(message.from_user.id)
    data_state = await state.get_data()
    receiver_username = data_state.get("receiver")
    if not receiver_username:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
        await state.clear()
        return
    ok, info = transfer_atomic(sender_id, receiver_username, amount)
    if not ok:
        if info == "no_user":
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        elif info == "no_money":
            await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—é–æ–∏–Ω–æ–≤ üíî")
        elif info == "invalid_amount":
            await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞.")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return
    # –£—Å–ø–µ—à–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
    await message.answer(f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ @{receiver_username} {amount} –∞—é–æ–∏–Ω–æ–≤! ^^ —Å–ø–∞—Å–∏–±–æ! üéÄ")
    # –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    try:
        await bot.send_message(info, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º {amount} –∞—é–æ–∏–Ω–æ–≤! –°–ø–∞—Å–∏–±–æ ^^~ üíï")
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é")
    await state.clear()

# --- Admin: —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ ---
@dp.message(Command("newpromo"))
async def cmd_newpromo(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    parts = (message.text or "").split()
    if len(parts) != 3:
        await message.answer("–§–æ—Ä–º–∞—Ç: /newpromo –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∏—Å–ª–æ")
        return
    code = parts[1].strip()
    try:
        reward = int(parts[2])
    except:
        await message.answer("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ –Ω–∞–≥—Ä–∞–¥—ã!")
        return
    create_promo(code, reward)
    link = f"https://t.me/{(await bot.get_me()).username}?start={code}"
    await message.answer(f"‚ú® –ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω: '{code}' (+{reward} –∞—é–æ–∏–Ω–æ–≤)\n–°—Å—ã–ª–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {link}")

@dp.message(Command("promos"))
async def cmd_promos(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    rows = _conn.execute("SELECT code, reward FROM promocodes").fetchall()
    if not rows:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ üå∏")
        return
    text = "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:\n"
    for r in rows:
        text += f"- {r['code']} : +{r['reward']} –∞—é–æ–∏–Ω–æ–≤\n"
    await message.answer(text)

# ---------- Web server (–∑–∞–≥–ª—É—à–∫–∞) ----------
async def handle_root(request):
    return web.Response(text="Ayuoin bot is running")

async def start_web_app():
    app = web.Application()
    app.add_routes([web.get("/", handle_root)])
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()
    logger.info("Web app started on port %s", PORT)

# ---------- Startup / main ----------
async def main():
    init_db()
    # –£–¥–∞–ª—è–µ–º webhook (–µ—Å–ª–∏ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ) ‚Äî —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∞–ø–¥–µ–π—Ç–æ–≤
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("Webhook deleted (drop_pending_updates=True)")
    except Exception:
        logger.exception("Failed to delete webhook")

    # –∑–∞–ø—É—Å—Ç–∏–º web-–∑–∞–≥–ª—É—à–∫—É –∏ polling –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    await start_web_app()
    # start polling (blocking) - aiogram will keep running
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º
        try:
            asyncio.run(bot.session.close())
        except Exception:
            pass
