import asyncio
import json
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

API_TOKEN = "8458016571:AAFQpM-UjHR2nneYhwgDHECQILulwGTtapQ"
ADMIN_ID = 6218936231  # —Ç–≤–æ–π –∞–π–¥–∏

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
USERS_FILE = "users.json"
PROMO_FILE = "promocodes.json"


# ============ –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ ============
def load_data(file, default):
    try:
        with open(file, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return default


def save_data(file, data):
    with open(file, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)


def get_users():
    return load_data(USERS_FILE, {})


def save_users(users):
    save_data(USERS_FILE, users)


def get_promos():
    return load_data(PROMO_FILE, {})


def save_promos(promos):
    save_data(PROMO_FILE, promos)


# ============ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ============
def get_balance(user_id):
    users = get_users()
    return users.get(str(user_id), {}).get("balance", 0)


def update_balance(user_id, amount):
    users = get_users()
    uid = str(user_id)
    if uid not in users:
        users[uid] = {"balance": 0, "first_bonus": False}
    users[uid]["balance"] = users[uid].get("balance", 0) + amount
    save_users(users)
    return users[uid]["balance"]


def set_first_bonus(user_id):
    users = get_users()
    uid = str(user_id)
    if uid not in users:
        users[uid] = {"balance": 0, "first_bonus": False}
    if not users[uid]["first_bonus"]:
        users[uid]["balance"] += 25
        users[uid]["first_bonus"] = True
    save_users(users)
    return users[uid]["balance"]


# ============ –ö–æ–º–∞–Ω–¥—ã ============
@dp.message(F.text == "/start")
async def start_cmd(message: types.Message):
    balance = set_first_bonus(message.from_user.id)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ë–∞–ª–∞–Ω—Å", callback_data="balance")],
            [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send")],
            [InlineKeyboardButton(text="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="activate")],
        ]
    )
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
        f"–ù–∞ —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ +25 –∫–æ–∏–Ω–æ–≤ üéâ\n"
        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} –∫–æ–∏–Ω–æ–≤.",
        reply_markup=kb
    )


@dp.callback_query(F.data == "balance")
async def check_balance(callback: types.CallbackQuery):
    balance = get_balance(callback.from_user.id)
    await callback.message.answer(f"üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {balance} –∫–æ–∏–Ω–æ–≤")


@dp.message(F.text == "/balance")
async def balance_cmd(message: types.Message):
    balance = get_balance(message.from_user.id)
    await message.answer(f"üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {balance} –∫–æ–∏–Ω–æ–≤")


@dp.callback_query(F.data == "send")
async def send_btn(callback: types.CallbackQuery):
    await callback.message.answer("–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n/send ID_–ü–û–õ–£–ß–ê–¢–ï–õ–Ø –°–£–ú–ú–ê")


@dp.message(F.text.startswith("/send"))
async def send_cmd(message: types.Message):
    try:
        _, target_id, amount = message.text.split()
        target_id, amount = int(target_id), int(amount)

        if get_balance(message.from_user.id) < amount:
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
            return

        update_balance(message.from_user.id, -amount)
        new_balance_sender = get_balance(message.from_user.id)

        update_balance(target_id, amount)
        new_balance_receiver = get_balance(target_id)

        await message.answer(
            f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–µ–Ω!\n"
            f"üì§ –¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª {amount} –∫–æ–∏–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}.\n"
            f"üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {new_balance_sender} –∫–æ–∏–Ω–æ–≤."
        )
        await bot.send_message(
            target_id,
            f"üì• –¢—ã –ø–æ–ª—É—á–∏–ª {amount} –∫–æ–∏–Ω–æ–≤ –æ—Ç {message.from_user.id}.\n"
            f"üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {new_balance_receiver} –∫–æ–∏–Ω–æ–≤."
        )

    except:
        await message.answer("‚ö† –û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π: /send ID –°–£–ú–ú–ê")


# ============ –ü—Ä–æ–º–æ–∫–æ–¥—ã ============
@dp.message(F.text.startswith("/createpromo"))
async def create_promo(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞.")
        return

    try:
        _, code, reward = message.text.split()
        reward = int(reward)

        promos = get_promos()
        promos[code] = {
            "reward": reward,
            "expires": (datetime.now() + timedelta(days=1)).isoformat()
        }
        save_promos(promos)

        await message.answer(f"üéÅ –ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!\n–ö–æ–¥: {code}\n–ù–∞–≥—Ä–∞–¥–∞: {reward} –∫–æ–∏–Ω–æ–≤ (—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è 24 —á–∞—Å–∞)")

    except:
        await message.answer("‚ö† –û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π: /createpromo –ö–û–î –ù–ê–ì–†–ê–î–ê")


@dp.callback_query(F.data == "activate")
async def activate_btn(callback: types.CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É: /promo –ö–û–î")


@dp.message(F.text.startswith("/promo"))
async def promo_cmd(message: types.Message):
    try:
        _, code = message.text.split()
        promos = get_promos()

        if code not in promos:
            await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.")
            return

        promo = promos[code]
        if datetime.now() > datetime.fromisoformat(promo["expires"]):
            await message.answer("‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç—ë–∫.")
            return

        reward = promo["reward"]
        new_balance = update_balance(message.from_user.id, reward)

        del promos[code]
        save_promos(promos)

        await message.answer(
            f"üéâ –£—Ä–∞! –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n"
            f"üíù –¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ {reward} –∫–æ–∏–Ω–æ–≤.\n"
            f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance} –∫–æ–∏–Ω–æ–≤."
        )
    except:
        await message.answer("‚ö† –û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π: /promo –ö–û–î")


# ============ –ó–∞–ø—É—Å–∫ ============
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
