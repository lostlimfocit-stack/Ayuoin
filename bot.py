import asyncio
import json
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiohttp import web

API_TOKEN = os.getenv("API_TOKEN", "8458016571:AAFQpM-UjHR2nneYhwgDHECQILulwGTtapQ")
ADMIN_ID = int(os.getenv("ADMIN_ID", 6218936231))  # —Ç–≤–æ–π –∞–π–¥–∏

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# --- –†–∞–±–æ—Ç–∞ —Å JSON ---
def load_data():
    try:
        with open("balances.json", "r") as f:
            data = json.load(f)
            if "balances" not in data:
                data["balances"] = {}
            if "usernames" not in data:
                data["usernames"] = {}
            if "used_promos" not in data:
                data["used_promos"] = {}
            if "promocodes" not in data:
                data["promocodes"] = {}
            return data
    except:
        return {"balances": {}, "usernames": {}, "used_promos": {}, "promocodes": {}}

def save_data(data):
    with open("balances.json", "w") as f:
        json.dump(data, f)

data = load_data()

# --- FSM –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ ---
class Transfer(StatesGroup):
    waiting_for_user = State()
    waiting_for_amount = State()

# --- –ö–Ω–æ–ø–∫–∏ ---
main_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ë–∞–ª–∞–Ω—Å ¬∞.‚Ä¢üéÄ", callback_data="balance")],
    [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å ¬∞.‚Ä¢üéÄ", callback_data="send")]
])

# --- –°—Ç–∞—Ä—Ç ---
@dp.message(F.text.startswith("/start"))
async def start(message: types.Message):
    user_id = str(message.from_user.id)
    username = message.from_user.username
    args = message.text.split()

    if user_id not in data["balances"]:
        data["balances"][user_id] = 25
    if username:
        data["usernames"][username.lower()] = user_id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    if len(args) > 1:
        code = args[1]
        if code in data["promocodes"] and user_id not in data["used_promos"].get(code, []):
            reward = data["promocodes"][code]
            data["balances"][user_id] += reward
            data["used_promos"].setdefault(code, []).append(user_id)
            save_data(data)
            await message.answer(f"‚ú® –ü—Ä–æ–º–æ–∫–æ–¥ '{code}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! +{reward} –∞—é–æ–∏–Ω–æ–≤ üå∏")

    save_data(data)

    text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
        "–Ø –∞—é–æ–∏–Ω, –≤–∞–ª—é—Ç–∞ tg –∫–∞–Ω–∞–ª–∞: @ayuolmaoo (‚Å†.‚Å†‚ùõ‚Å†·¥ó‚Å†‚ùõ‚Å†.)\n\n"
        "–ë–ª–∞–≥–æ–¥–∞—Ä—è –º–Ω–µ –º–æ–∂–Ω–æ:\n"
        "–û–±–º–µ–Ω–∏–≤–∞—Ç—å, –ø—Ä–æ–¥–∞–≤–∞—Ç—å, –ø–æ–∫—É–ø–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π ;\n\n"
        "üéÄ –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –∞—é–æ–∏–Ω—ã –¥—Ä—É–≥—É!"
    )
    await message.answer(text, reply_markup=main_menu)

# --- –ë–∞–ª–∞–Ω—Å ---
@dp.callback_query(F.data == "balance")
async def balance(callback: types.CallbackQuery):
    user_id = str(callback.from_user.id)
    bal = data["balances"].get(user_id, 0)
    await callback.message.answer(f"–¢–≤–æ–π –±–∞–ª–∞–Ω—Å... {bal} –∞—é–æ–∏–Ω–æ–≤! üíñ")

# --- –û—Ç–ø—Ä–∞–≤–∏—Ç—å ---
@dp.callback_query(F.data == "send")
async def send(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–º—É —á–µ–ª–æ–≤–µ–∫—É –∞—é–æ–∏–Ω—ã ^^ ~\n"
        "–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ @—é–∑–µ—Ä–Ω–µ–π–º üíï"
    )
    await state.set_state(Transfer.waiting_for_user)

@dp.message(Transfer.waiting_for_user)
async def process_user(message: types.Message, state: FSMContext):
    username = message.text.lstrip("@").lower()
    if username not in data["usernames"]:
        await message.answer("–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç... ü•∫")
        return
    await state.update_data(receiver=username)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∞—é–æ–∏–Ω–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ ‚ú®")
    await state.set_state(Transfer.waiting_for_amount)

@dp.message(Transfer.waiting_for_amount)
async def process_amount(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text)
    except:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return

    sender_id = str(message.from_user.id)
    user_data = await state.get_data()
    receiver_username = user_data["receiver"]
    receiver_id = data["usernames"][receiver_username]

    if data["balances"].get(sender_id, 0) < amount:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—é–æ–∏–Ω–æ–≤ üíî")
        await state.clear()
        return

    # –ü–µ—Ä–µ–≤–æ–¥
    data["balances"][sender_id] -= amount
    data["balances"][receiver_id] = data["balances"].get(receiver_id, 0) + amount
    save_data(data)

    # –°–æ–æ–±—â–µ–Ω–∏—è
    await message.answer(
        f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ @{receiver_username} {amount} –∞—é–æ–∏–Ω–æ–≤! ^^ —Å–ø–∞—Å–∏–±–æ! üéÄ"
    )
    try:
        await bot.send_message(
            receiver_id,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º {amount} –∞—é–æ–∏–Ω–æ–≤! –°–ø–∞—Å–∏–±–æ ^^~ üíï"
        )
    except:
        pass

    await state.clear()

# --- –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω) ---
@dp.message(F.text.startswith("/newpromo"))
async def new_promo(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    parts = message.text.split()
    if len(parts) != 3:
        await message.answer("–§–æ—Ä–º–∞—Ç: /newpromo –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∏—Å–ª–æ")
        return
    code, reward = parts[1], parts[2]
    try:
        reward = int(reward)
    except:
        await message.answer("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ –Ω–∞–≥—Ä–∞–¥—ã!")
        return

    data["promocodes"][code] = reward
    save_data(data)

    link = f"https://t.me/Ayuoin_bot?start={code}"
    await message.answer(
        f"‚ú® –ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω: '{code}' (+{reward} –∞—é–æ–∏–Ω–æ–≤)\n"
        f"–°—Å—ã–ª–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {link}"
    )

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω) ---
@dp.message(F.text.startswith("/promos"))
async def show_promos(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    if not data["promocodes"]:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ üå∏")
        return
    text = "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:\n"
    for code, reward in data["promocodes"].items():
        text += f"- {code} : +{reward} –∞—é–æ–∏–Ω–æ–≤\n"
    await message.answer(text)

# --- Web server-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è Render ---
async def handle(request):
    return web.Response(text="Bot is running!")

async def start_web_app():
    app = web.Application()
    app.add_routes([web.get("/", handle)])
    port = int(os.environ.get("PORT", 8080))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    # –∑–∞–ø—É—Å–∫–∞–µ–º web-—Å–µ—Ä–≤–µ—Ä + polling –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    asyncio.create_task(start_web_app())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
